!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="public",n(n.s=0)}([function(t,e,n){t.exports=n(2)},function(t,e){var n,o,i,r,a,s;n=jQuery,o=window,i=window.document,r="touchstart mousedown",a="touchmove mousemove",s="touchend mouseup",n(i).ready((function(){function t(t){for(var e={},n=t.match(/([^;:]+)/g)||[];n.length;)e[n.shift()]=n.shift().trim();return e}n("table").each((function(){"dnd"===n(this).data("table")&&n(this).tableDnD({onDragStyle:n(this).data("ondragstyle")&&t(n(this).data("ondragstyle"))||null,onDropStyle:n(this).data("ondropstyle")&&t(n(this).data("ondropstyle"))||null,onDragClass:void 0===n(this).data("ondragclass")?"tDnD_whileDrag":n(this).data("ondragclass"),onDrop:n(this).data("ondrop")&&new Function("table","row",n(this).data("ondrop")),onDragStart:n(this).data("ondragstart")&&new Function("table","row",n(this).data("ondragstart")),onDragStop:n(this).data("ondragstop")&&new Function("table","row",n(this).data("ondragstop")),scrollAmount:n(this).data("scrollamount")||5,sensitivity:n(this).data("sensitivity")||10,hierarchyLevel:n(this).data("hierarchylevel")||0,indentArtifact:n(this).data("indentartifact")||'<div class="indent">&nbsp;</div>',autoWidthAdjust:n(this).data("autowidthadjust")||!0,autoCleanRelations:n(this).data("autocleanrelations")||!0,jsonPretifySeparator:n(this).data("jsonpretifyseparator")||"\t",serializeRegexp:n(this).data("serializeregexp")&&new RegExp(n(this).data("serializeregexp"))||/[^\-]*$/,serializeParamName:n(this).data("serializeparamname")||!1,dragHandle:n(this).data("draghandle")||null})}))})),jQuery.tableDnD={currentTable:null,dragObject:null,mouseOffset:null,oldX:0,oldY:0,build:function(t){return this.each((function(){this.tableDnDConfig=n.extend({onDragStyle:null,onDropStyle:null,onDragClass:"tDnD_whileDrag",onDrop:null,onDragStart:null,onDragStop:null,scrollAmount:5,sensitivity:10,hierarchyLevel:0,indentArtifact:'<div class="indent">&nbsp;</div>',autoWidthAdjust:!0,autoCleanRelations:!0,jsonPretifySeparator:"\t",serializeRegexp:/[^\-]*$/,serializeParamName:!1,dragHandle:null},t||{}),n.tableDnD.makeDraggable(this),this.tableDnDConfig.hierarchyLevel&&n.tableDnD.makeIndented(this)})),this},makeIndented:function(t){var e,o,i=t.tableDnDConfig,r=t.rows,a=n(r).first().find("td:first")[0],s=0,l=0;if(n(t).hasClass("indtd"))return null;o=n(t).addClass("indtd").attr("style"),n(t).css({whiteSpace:"nowrap"});for(var d=0;d<r.length;d++)l<n(r[d]).find("td:first").text().length&&(l=n(r[d]).find("td:first").text().length,e=d);for(n(a).css({width:"auto"}),d=0;d<i.hierarchyLevel;d++)n(r[e]).find("td:first").prepend(i.indentArtifact);for(a&&n(a).css({width:a.offsetWidth}),o&&n(t).css(o),d=0;d<i.hierarchyLevel;d++)n(r[e]).find("td:first").children(":first").remove();return i.hierarchyLevel&&n(r).each((function(){(s=n(this).data("level")||0)<=i.hierarchyLevel&&n(this).data("level",s)||n(this).data("level",0);for(var t=0;t<n(this).data("level");t++)n(this).find("td:first").prepend(i.indentArtifact)})),this},makeDraggable:function(t){var e=t.tableDnDConfig;e.dragHandle&&n(e.dragHandle,t).each((function(){n(this).bind(r,(function(o){return n.tableDnD.initialiseDrag(n(this).parents("tr")[0],t,this,o,e),!1}))}))||n(t.rows).each((function(){n(this).hasClass("nodrag")?n(this).css("cursor",""):n(this).bind(r,(function(o){if("TD"===o.target.tagName)return n.tableDnD.initialiseDrag(this,t,this,o,e),!1})).css("cursor","move")}))},currentOrder:function(){var t=this.currentTable.rows;return n.map(t,(function(t){return(n(t).data("level")+t.id).replace(/\s/g,"")})).join("")},initialiseDrag:function(t,e,o,r,l){this.dragObject=t,this.currentTable=e,this.mouseOffset=this.getMouseOffset(o,r),this.originalOrder=this.currentOrder(),n(i).bind(a,this.mousemove).bind(s,this.mouseup),l.onDragStart&&l.onDragStart(e,o)},updateTables:function(){this.each((function(){this.tableDnDConfig&&n.tableDnD.makeDraggable(this)}))},mouseCoords:function(t){return t.originalEvent.changedTouches?{x:t.originalEvent.changedTouches[0].clientX,y:t.originalEvent.changedTouches[0].clientY}:t.pageX||t.pageY?{x:t.pageX,y:t.pageY}:{x:t.clientX+i.body.scrollLeft-i.body.clientLeft,y:t.clientY+i.body.scrollTop-i.body.clientTop}},getMouseOffset:function(t,e){var n,i;return e=e||o.event,i=this.getPosition(t),{x:(n=this.mouseCoords(e)).x-i.x,y:n.y-i.y}},getPosition:function(t){var e=0,n=0;for(0===t.offsetHeight&&(t=t.firstChild);t.offsetParent;)e+=t.offsetLeft,n+=t.offsetTop,t=t.offsetParent;return{x:e+=t.offsetLeft,y:n+=t.offsetTop}},autoScroll:function(t){var e=this.currentTable.tableDnDConfig,n=o.pageYOffset,r=o.innerHeight?o.innerHeight:i.documentElement.clientHeight?i.documentElement.clientHeight:i.body.clientHeight;i.all&&(void 0!==i.compatMode&&"BackCompat"!==i.compatMode?n=i.documentElement.scrollTop:void 0!==i.body&&(n=i.body.scrollTop)),t.y-n<e.scrollAmount&&o.scrollBy(0,-e.scrollAmount)||r-(t.y-n)<e.scrollAmount&&o.scrollBy(0,e.scrollAmount)},moveVerticle:function(t,e){0!==t.vertical&&e&&this.dragObject!==e&&this.dragObject.parentNode===e.parentNode&&(0>t.vertical&&this.dragObject.parentNode.insertBefore(this.dragObject,e.nextSibling)||0<t.vertical&&this.dragObject.parentNode.insertBefore(this.dragObject,e))},moveHorizontal:function(t,e){var o,i=this.currentTable.tableDnDConfig;if(!i.hierarchyLevel||0===t.horizontal||!e||this.dragObject!==e)return null;o=n(e).data("level"),0<t.horizontal&&o>0&&n(e).find("td:first").children(":first").remove()&&n(e).data("level",--o),0>t.horizontal&&o<i.hierarchyLevel&&n(e).prev().data("level")>=o&&n(e).children(":first").prepend(i.indentArtifact)&&n(e).data("level",++o)},mousemove:function(t){var e,o,i,r,a,s=n(n.tableDnD.dragObject),l=n.tableDnD.currentTable.tableDnDConfig;return t&&t.preventDefault(),!!n.tableDnD.dragObject&&("touchmove"===t.type&&event.preventDefault(),l.onDragClass&&s.addClass(l.onDragClass)||s.css(l.onDragStyle),r=(o=n.tableDnD.mouseCoords(t)).x-n.tableDnD.mouseOffset.x,a=o.y-n.tableDnD.mouseOffset.y,n.tableDnD.autoScroll(o),e=n.tableDnD.findDropTargetRow(s,a),i=n.tableDnD.findDragDirection(r,a),n.tableDnD.moveVerticle(i,e),n.tableDnD.moveHorizontal(i,e),!1)},findDragDirection:function(t,e){var n=this.currentTable.tableDnDConfig.sensitivity,o=this.oldX,i=this.oldY,r={horizontal:t>=o-n&&t<=o+n?0:t>o?-1:1,vertical:e>=i-n&&e<=i+n?0:e>i?-1:1};return 0!==r.horizontal&&(this.oldX=t),0!==r.vertical&&(this.oldY=e),r},findDropTargetRow:function(t,e){for(var o=0,i=this.currentTable.rows,r=this.currentTable.tableDnDConfig,a=0,s=null,l=0;l<i.length;l++)if(s=i[l],a=this.getPosition(s).y,o=parseInt(s.offsetHeight)/2,0===s.offsetHeight&&(a=this.getPosition(s.firstChild).y,o=parseInt(s.firstChild.offsetHeight)/2),e>a-o&&e<a+o)return t.is(s)||r.onAllowDrop&&!r.onAllowDrop(t,s)||n(s).hasClass("nodrop")?null:s;return null},processMouseup:function(){if(!this.currentTable||!this.dragObject)return null;var t=this.currentTable.tableDnDConfig,e=this.dragObject,o=0,r=0;n(i).unbind(a,this.mousemove).unbind(s,this.mouseup),t.hierarchyLevel&&t.autoCleanRelations&&n(this.currentTable.rows).first().find("td:first").children().each((function(){(r=n(this).parents("tr:first").data("level"))&&n(this).parents("tr:first").data("level",--r)&&n(this).remove()}))&&t.hierarchyLevel>1&&n(this.currentTable.rows).each((function(){if((r=n(this).data("level"))>1)for(o=n(this).prev().data("level");r>o+1;)n(this).find("td:first").children(":first").remove(),n(this).data("level",--r)})),t.onDragClass&&n(e).removeClass(t.onDragClass)||n(e).css(t.onDropStyle),this.dragObject=null,t.onDrop&&this.originalOrder!==this.currentOrder()&&n(e).hide().fadeIn("fast")&&t.onDrop(this.currentTable,e),t.onDragStop&&t.onDragStop(this.currentTable,e),this.currentTable=null},mouseup:function(t){return t&&t.preventDefault(),n.tableDnD.processMouseup(),!1},jsonize:function(t){var e=this.currentTable;return t?JSON.stringify(this.tableData(e),null,e.tableDnDConfig.jsonPretifySeparator):JSON.stringify(this.tableData(e))},serialize:function(){return n.param(this.tableData(this.currentTable))},serializeTable:function(t){for(var e="",n=t.tableDnDConfig.serializeParamName||t.id,o=t.rows,i=0;i<o.length;i++){e.length>0&&(e+="&");var r=o[i].id;r&&t.tableDnDConfig&&t.tableDnDConfig.serializeRegexp&&(e+=n+"[]="+(r=r.match(t.tableDnDConfig.serializeRegexp)[0]))}return e},serializeTables:function(){var t=[];return n("table").each((function(){this.id&&t.push(n.param(n.tableDnD.tableData(this)))})),t.join("&")},tableData:function(t){var e,o,i,r,a=t.tableDnDConfig,s=[],l=0,d=0,c=null,u={};if(t||(t=this.currentTable),!t||!t.rows||!t.rows.length)return{error:{code:500,message:"Not a valid table."}};if(!t.id&&!a.serializeParamName)return{error:{code:500,message:"No serializable unique id provided."}};r=a.autoCleanRelations&&t.rows||n.makeArray(t.rows),e=function(t){return t&&a&&a.serializeRegexp?t.match(a.serializeRegexp)[0]:t},u[i=o=a.serializeParamName||t.id]=[],!a.autoCleanRelations&&n(r[0]).data("level")&&r.unshift({id:"undefined"});for(var h=0;h<r.length;h++)if(a.hierarchyLevel){if(0===(d=n(r[h]).data("level")||0))i=o,s=[];else if(d>l)s.push([i,l]),i=e(r[h-1].id);else if(d<l)for(var f=0;f<s.length;f++)s[f][1]===d&&(i=s[f][0]),s[f][1]>=l&&(s[f][1]=0);l=d,n.isArray(u[i])||(u[i]=[]),(c=e(r[h].id))&&u[i].push(c)}else(c=e(r[h].id))&&u[i].push(c);return u}},jQuery.fn.extend({tableDnD:n.tableDnD.build,tableDnDUpdate:n.tableDnD.updateTables,tableDnDSerialize:n.proxy(n.tableDnD.serialize,n.tableDnD),tableDnDSerializeAll:n.tableDnD.serializeTables,tableDnDData:n.proxy(n.tableDnD.tableData,n.tableDnD)})},function(t,e,n){"use strict";n.r(e);
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */var o,i={categoryDeleteAction:".js-delete-category-row-action",customerDeleteAction:".js-delete-customer-row-action",linkRowAction:".js-link-row-action",linkRowActionClickableFirst:".js-link-row-action[data-clickable-row=1]:first",clickableTd:"td.clickable"},r=function(t){return"".concat(t,"-grid-confirm-modal")},a=".js-grid-table",s=".js-drag-handle",l=function(t){return"#".concat(t,"_grid")},d=".js-grid-panel",c=".js-grid-header",u=function(t){return".js-grid-table .js-".concat(t,"-position")},h=function(t){return".js-".concat(t,"-position:first")},f="table.table",p=".js-reset-search",m="position-row-while-drag",g=window.$,b=function(){function t(t){this.id=t,this.$container=g(l(this.id))}return t.prototype.getId=function(){return this.id},t.prototype.getContainer=function(){return this.$container},t.prototype.getHeaderContainer=function(){return this.$container.closest(d).find(c)},t.prototype.addExtension=function(t){t.extend(this)},t}(),y=window.$,v=function(){function t(){}return t.prototype.extend=function(t){this.initRowLinks(t),this.initConfirmableActions(t)},t.prototype.initConfirmableActions=function(t){t.getContainer().on("click",i.linkRowAction,(function(t){var e=y(t.currentTarget).data("confirm-message");e.length&&!window.confirm(e)&&t.preventDefault()}))},t.prototype.initRowLinks=function(t){y("tr",t.getContainer()).each((function(){var t=y(this);y(i.linkRowActionClickableFirst,t).each((function(){var e=y(this),n=e.closest("td"),o=y(i.clickableTd,t).not(n),r=!1;o.addClass("cursor-pointer").mousedown((function(){y(window).mousemove((function(){r=!0,y(window).unbind("mousemove")}))})),o.mouseup((function(){var t=r;if(r=!1,y(window).unbind("mousemove"),!t){var n=e.data("confirm-message");(!n.length||window.confirm(n)&&e.attr("href"))&&(document.location.href=e.attr("href"))}}))}))}))},t}(),D=function(){return(D=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},w=function(){function t(t){var e=D({id:"confirm-modal",closable:!1,closeCallback:function(){return!0}},t);this.buildModalContainer(e)}return t.prototype.buildModalContainer=function(t){var e=this;this.container=document.createElement("div"),this.container.classList.add("modal","fade"),this.container.id=t.id,this.dialog=document.createElement("div"),this.dialog.classList.add("modal-dialog"),t.dialogStyle&&Object.keys(t.dialogStyle).forEach((function(n){e.dialog.style[n]=t.dialogStyle[n]})),this.content=document.createElement("div"),this.content.classList.add("modal-content"),this.message=document.createElement("p"),this.message.classList.add("modal-message"),this.header=document.createElement("div"),this.header.classList.add("modal-header"),t.modalTitle&&(this.title=document.createElement("h4"),this.title.classList.add("modal-title"),this.title.innerHTML=t.modalTitle),this.closeIcon=document.createElement("button"),this.closeIcon.classList.add("close"),this.closeIcon.setAttribute("type","button"),this.closeIcon.dataset.dismiss="modal",this.closeIcon.innerHTML="×",this.body=document.createElement("div"),this.body.classList.add("modal-body","text-left","font-weight-normal"),this.title&&this.header.appendChild(this.title),this.header.appendChild(this.closeIcon),this.content.append(this.header,this.body),this.body.appendChild(this.message),this.dialog.appendChild(this.content),this.container.appendChild(this.dialog)},t}(),C=function(){function t(t){var e=D({id:"confirm-modal",closable:!1,dialogStyle:{}},t);this.initContainer(e)}return t.prototype.initContainer=function(t){this.modal||(this.modal=new w(t)),this.$modal=$(this.modal.container);var e=t.id,n=t.closable;this.$modal.modal({backdrop:!!n||"static",keyboard:void 0===n||n,show:!1}),this.$modal.on("hidden.bs.modal",(function(){var n=document.querySelector("#".concat(e));n&&n.remove(),t.closeCallback&&t.closeCallback()})),document.body.appendChild(this.modal.container)},t.prototype.setTitle=function(t){this.modal.title||(this.modal.title=document.createElement("h4"),this.modal.title.classList.add("modal-title"),this.modal.header.insertBefore(this.modal.title,this.modal.closeIcon)),this.modal.title.innerHTML=t},t.prototype.render=function(t){this.modal.message.innerHTML=t},t.prototype.show=function(){this.$modal.modal("show")},t.prototype.hide=function(){this.$modal.modal("hide")},t}(),O=(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),T=function(){return(T=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},L=function(t,e,n){if(n||2===arguments.length)for(var o,i=0,r=e.length;i<r;i++)!o&&i in e||(o||(o=Array.prototype.slice.call(e,0,i)),o[i]=e[i]);return t.concat(o||Array.prototype.slice.call(e))},j=function(t){function e(e){return t.call(this,e)||this}return O(e,t),e.prototype.buildModalContainer=function(e){var n;t.prototype.buildModalContainer.call(this,e),this.message.classList.add("confirm-message"),this.message.innerHTML=e.confirmMessage,this.footer=document.createElement("div"),this.footer.classList.add("modal-footer"),this.closeButton=document.createElement("button"),this.closeButton.setAttribute("type","button"),this.closeButton.classList.add("btn","btn-outline-secondary","btn-lg"),this.closeButton.dataset.dismiss="modal",this.closeButton.innerHTML=e.closeButtonLabel,this.confirmButton=document.createElement("button"),this.confirmButton.setAttribute("type","button"),this.confirmButton.classList.add("btn",e.confirmButtonClass,"btn-lg","btn-confirm-submit"),this.confirmButton.dataset.dismiss="modal",this.confirmButton.innerHTML=e.confirmButtonLabel,(n=this.footer).append.apply(n,L(L([this.closeButton],e.customButtons,!1),[this.confirmButton],!1)),this.content.append(this.footer)},e}(w),S=function(t){function e(e,n,o){void 0===o&&(o=function(){return!0});var i=T({id:"confirm-modal",confirmMessage:"Are you sure?",closeButtonLabel:"Close",confirmButtonLabel:"Accept",confirmButtonClass:"btn-primary",customButtons:[],closable:!1,modalTitle:e.confirmTitle,dialogStyle:{},confirmCallback:n,closeCallback:o},e);return t.call(this,i)||this}return O(e,t),e.prototype.initContainer=function(e){this.modal=new j(e),this.modal.confirmButton.addEventListener("click",e.confirmCallback),t.prototype.initContainer.call(this,e)},e}(C),P=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),x=function(){return(x=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},B=function(t){function e(e){return t.call(this,e)||this}return P(e,t),e.prototype.buildModalContainer=function(e){t.prototype.buildModalContainer.call(this,e),this.container.classList.add("modal-iframe"),this.message.classList.add("d-none"),this.iframe=document.createElement("iframe"),this.iframe.frameBorder="0",this.iframe.scrolling="auto",this.iframe.width="100%",this.iframe.height="100%",this.loader=document.createElement("div"),this.loader.classList.add("modal-iframe-loader"),this.spinner=document.createElement("div"),this.spinner.classList.add("spinner"),this.loader.appendChild(this.spinner),this.body.append(this.loader,this.iframe)},e}(w),z=function(t){function e(e){var n=x({id:"iframe-modal",closable:!1,autoSize:!0,autoSizeContainer:"body"},e);return t.call(this,n)||this}return P(e,t),e.prototype.initContainer=function(e){var n=this;this.modal=new B(e),t.prototype.initContainer.call(this,e),this.autoSize=e.autoSize,this.autoSizeContainer=e.autoSizeContainer,this.modal.iframe.addEventListener("load",(function(t){n.hideLoading(),e.onLoaded&&e.onLoaded(n.modal.iframe,t),n.modal.iframe.contentWindow&&(n.modal.iframe.contentWindow.addEventListener("beforeunload",(function(t){e.onUnload&&e.onUnload(n.modal.iframe,t),n.showLoading()})),n.autoResize())})),this.$modal.on("shown.bs.modal",(function(){n.modal.iframe.src=e.iframeUrl}))},e.prototype.render=function(t,e){void 0===e&&(e=!0),this.modal.message.innerHTML=t,this.modal.message.classList.remove("d-none"),e&&this.hideIframe(),this.autoResize(),this.hideLoading()},e.prototype.showLoading=function(){this.modal.loader.classList.remove("d-none")},e.prototype.hideLoading=function(){this.modal.loader.classList.add("d-none")},e.prototype.hideIframe=function(){this.modal.iframe.classList.add("d-none")},e.prototype.autoResize=function(){if(this.autoSize&&this.modal.iframe.contentWindow){var t=this.modal.iframe.contentWindow.document.querySelector(this.autoSizeContainer);if(t){var e=t.scrollHeight,n=this.getOuterHeight(this.modal.header)+this.getOuterHeight(this.modal.message)+e;n&&(this.modal.dialog.style.height="".concat(n,"px"))}}},e.prototype.getOuterHeight=function(t){if(!t.offsetHeight)return 0;var e=t.offsetHeight,n=getComputedStyle(t);return e+=parseInt(n.marginTop,10)+parseInt(n.marginBottom,10)},e}(C),A=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),_=function(){return(_=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},E=(function(t){function e(e){var n=this,o=_({iframeUrl:e.formUrl,onLoaded:function(t,e){return n.onIframeLoaded(t,e)}},e);return(n=t.call(this,o)||this).onFormLoaded=e.onFormLoaded,n.cancelButtonSelector=e.cancelButtonSelector||".cancel-btn",n.formSelector=e.formSelector||"form",n}A(e,t),e.prototype.onIframeLoaded=function(t,e){var n=this;if(t.contentWindow){var o=t.contentWindow.document.querySelector(this.formSelector);if(o)if(o.querySelectorAll(this.cancelButtonSelector).forEach((function(t){t.addEventListener("click",(function(){n.hide()}))})),this.onFormLoaded){var i=null,r=$(o).serializeArray();o.dataset&&(i=o.dataset),this.onFormLoaded(o,r,i,e)}}}}(z),window.$),k=function(){function t(){}return t.prototype.extend=function(t){var e=this;t.getContainer().on("click",".js-submit-row-action",(function(n){n.preventDefault();var o=E(n.currentTarget),i=o.data("confirmMessage"),r=o.data("title"),a=o.data("method");if(r)e.showConfirmModal(o,t,i,r,a);else{if(i.length&&!window.confirm(i))return;e.postForm(o,a)}}))},t.prototype.postForm=function(t,e){var n=["GET","POST"].includes(e),o=E("<form>",{action:t.data("url"),method:n?e:"POST"}).appendTo("body");n||o.append(E("<input>",{type:"_hidden",name:"_method",value:e})),o.submit()},t.prototype.showConfirmModal=function(t,e,n,o,i){var a=this,s=t.data("confirmButtonLabel"),l=t.data("closeButtonLabel"),d=t.data("confirmButtonClass");new S({id:r(e.getId()),confirmTitle:o,confirmMessage:n,confirmButtonLabel:s,closeButtonLabel:l,confirmButtonClass:d},(function(){return a.postForm(t,i)})).show()},t}(),M=window.$,H=function(){function t(t){this.selector=".ps-sortable-column",this.columns=M(t).find(this.selector)}return t.prototype.attach=function(){var t=this;this.columns.on("click",(function(e){var n=M(e.delegateTarget);t.sortByColumn(n,t.getToggledSortDirection(n))}))},t.prototype.sortBy=function(t,e){if(!this.columns.is('[data-sort-col-name="'.concat(t,'"]')))throw new Error('Cannot sort by "'.concat(t,'": invalid column'));this.sortByColumn(this.columns,e)},t.prototype.sortByColumn=function(t,e){window.location.href=this.getUrl(t.data("sortColName"),"desc"===e?"desc":"asc",t.data("sortPrefix"))},t.prototype.getToggledSortDirection=function(t){return"asc"===t.data("sortDirection")?"desc":"asc"},t.prototype.getUrl=function(t,e,n){var o=new URL(window.location.href),i=o.searchParams;return n?(i.set("".concat(n,"[orderBy]"),t),i.set("".concat(n,"[sortOrder]"),e)):(i.set("orderBy",t),i.set("sortOrder",e)),o.toString()},t}(),I=function(){function t(){}return t.prototype.extend=function(t){var e=t.getContainer().find(f);new H(e).attach()},t}(),R=(n(1),window.$),N=function(){function t(t){this.grid=t}return t.prototype.extend=function(t){var e=this;this.grid=t,this.addIdsToGridTableRows(),t.getContainer().find(a).tableDnD({onDragClass:m,dragHandle:s,onDrop:function(t,n){return e.handlePositionChange(n)}}),t.getContainer().find(".js-drag-handle").hover((function(){R(this).closest("tr").addClass("hover")}),(function(){R(this).closest("tr").removeClass("hover")}))},t.prototype.handlePositionChange=function(t){var e=R(t).find(h(this.grid.getId())),n=e.data("update-url"),o=e.data("update-method"),i={positions:this.getRowsPositions()};this.updatePosition(n,i,o)},t.prototype.getRowsPositions=function(){for(var t,e=JSON.parse(R.tableDnD.jsonize())["".concat(this.grid.getId(),"_grid_table")],n=[],o=0;o<e.length;o+=1)t=this.grid.getContainer().find("#".concat(e[o])),n.push({rowMarker:e[o],offset:t.data("dragAndDropOffset")});return this.computeMappingBetweenOldAndNewPositions(n)},t.prototype.addIdsToGridTableRows=function(){var t=0;this.grid.getContainer().find(u(this.grid.getId())).each((function(e,n){var o=R(n),i=o.data("id"),r=o.data("position"),a="row_".concat(i,"_").concat(r);o.closest("tr").attr("id",a),o.closest("td").addClass(s),o.closest("tr").data("dragAndDropOffset",t),t+=1}))},t.prototype.updatePosition=function(t,e,n){for(var o,i=["GET","POST"].includes(n),r=R("<form>",{action:t,method:i?n:"POST"}).appendTo("body"),a=e.positions.length,s=0;s<a;s+=1)o=e.positions[s],r.append(R("<input>",{type:"hidden",name:"positions[".concat(s,"][rowId]"),value:o.rowId}),R("<input>",{type:"hidden",name:"positions[".concat(s,"][oldPosition]"),value:o.oldPosition}),R("<input>",{type:"hidden",name:"positions[".concat(s,"][newPosition]"),value:o.newPosition}));i||r.append(R("<input>",{type:"hidden",name:"_method",value:n})),r.submit()},t.prototype.computeMappingBetweenOldAndNewPositions=function(t){for(var e=/^row_(\d+)_(\d+)$/,n=Array(t.length).map(Object),o=0;o<t.length;o+=1){var i=e.exec(t[o].rowMarker);(null==i?void 0:i.rowId)&&(null==i?void 0:i.oldPosition)&&(n[o].rowId=i.rowId,n[o].oldPosition=parseInt(i.oldPosition,10)),n[t[o].offset].newPosition=n[o].oldPosition}return n},t}();
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */
const{$:F}=window;var U=function(t,e){F.post(t).then(()=>window.location.assign(e))},W=window.$,Y=function(){function t(){}return t.prototype.extend=function(t){t.getContainer().on("click",p,(function(t){U(W(t.currentTarget).data("url"),W(t.currentTarget).data("redirect"))}))},t}();
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License version 3.0
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/AFL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License version 3.0
 */
const{$:X}=window;X(()=>{const t=new b("product");t.addExtension(new I),t.addExtension(new v),t.addExtension(new k),t.addExtension(new N),t.addExtension(new Y)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,